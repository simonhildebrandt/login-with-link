## Documentation

__Login With Link__ is designed to be an ultralight authentication option, suitable for simple or experimental projects.

The process is straightforward: you link your prospective or returning user to our login page, where they provide an email address. We send a login link to that email address, and following that link will send them to your site with a [JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token) embedded in the URL for you to extract and use.

(We also provide a PKCE-style flow for enhanced security, see below for details.)

### Usage

As described above, when we link your user back to your site we'll include a JWT in the URL. These tokens are a popular standard for identifying a user - they store various claims (in our case an email address and a user id unique to that email address) and a cryptographic signature so you can verify that it's a legitimate token, issued by us.

This site uses __Login With Link__ itself for authentication, so the simplest way to demonstrate it's usage is to link to our own source code, here: [login-check.js](https://github.com/simonhildebrandt/login-with-link/blob/master/src/login-check.js) extracts the `lwl-token` parameter from the URL, stores it (in this case in local storage, but a signed cookie might make more sense for your solution) and reloads the page.

The remaining step is on the server. Verifying the signature as [Express](https://expressjs.com/) [middleware](https://expressjs.com/en/guide/using-middlewa) is demonstrated in [private.js](https://github.com/simonhildebrandt/login-with-link/blob/master/functions/private.js#L17), using the `checkToken` function in [utils.js](https://github.com/simonhildebrandt/login-with-link/blob/master/functions/utils.js#L21) - all based on the [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) package.

### Configuration

Clicking 'Admin' above will take you to the admin console, allowing you to create client configurations for each of your projects. For each client you can create multiple keys, making it easier to separate credentials for different environments - say, production, staging and development.

When editing client configuration, you'll see the following fields:

 - __Client Name__ - assign your project a memorable name, like "Awesome Project".
 - __Key Name__ - each key in your client should have a unique name, like 'production', to indicate what context it's for.
 - __Unique Key__ - as well as a human-readable Key Name, each key has a machine-readable identifier, which is used when accessing the __Login With Link__ service.
 - __Secret__ - the secret used to sign the JWT, which you can then use to verify the JWT came from us.
 - __Return URL__ - the URL of your site, where the authenticated user should end up. (This URL will automatically have the JWT merged into its parameters, as `lwl-token`.)
- __Login Link__ - below the key details we show the login link you should use - click it to try it out, then copy it to use in your site.
- __Code exchange?__ - to make a small sacrifice of simiplicity for security, activate code exchange mode for the PKCE-style code exchange mentioned above. Instead of a token in the `lwl-token` URL parameter, you'll get `lwl-code`, which contains a value that can then be *exchanged* for a token (JWT), at `https://login-with.link/api/exchange/<code>`.

(Additionally, the envelope button displays a preview of the login email we'll send, and there are some stats at the bottom indicating your recent login count, and current login cap.)
